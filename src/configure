#!/bin/bash

# This configure script is hand-generated, not auto-generated.
# It creates the file kaldi.mk, which is %included by the Makefiles
# in the subdirectories.
# The file kaldi.mk is editable by hand -- for example, you may want to
# remove the options -g -O0 -DKALDI_PARANOID, or edit the
# DOUBLE_PRECISION variable (to be 1 not 0).


#  Example command lines:
# ./configure --shared  ## shared libraries.
# ./configure
# ./configure --static  ## static libraries.
# ./configure --static --host=armv8-rpi3-linux-gnueabihf
#        # Cross compile for armv8hf, this assumes that you built
#        # with the armv8-rpi3-linux-gnueabihf toolchain
# ./configure --static \
# --android-incdir=/opt/cross/arm-linux-androideabi/sysroot/usr/include \
# --host=arm-linux-androideabi
#        # Cross compile for Android on arm. The only difference here is the
#        # addition of the the --android-includes flag because the toolchains
#        # produced by the Android NDK don't always include the C++ stdlib
#        # headers in the normal cross compile include path.

# This should be incremented after any significant change to the configure
# script, i.e. any change affecting pitch.mk or the build system as a whole.
CONFIGURE_VERSION=1

if ! [ -x "$PWD/configure" ]; then
  echo 'You must run "configure" from the src/ directory.'
  exit 1
fi

function usage {
  cat <<EOF
'configure' configures Kaldi installation.

Usage: [VAR=VALUE]... $0 [OPTION]...

The default configuration is to build and link against static pitch tool libraries.

Configuration options:
  --help                Display this help message and exit
  --version             Display the version of 'configure' and exit
  --static              Build and link against static libraries [default=no]
  --shared              Build and link against shared libraries [default=no]
  --double-precision    Build with double precision floats [default=no]
  --static-fst          Build with static OpenFst libraries [default=no]
  --host=HOST           Host triple in the format 'cpu-vendor-os'
                        If provided, it is prepended to all toolchain programs.
  --android-incdir=DIR  Andraid include directory

Following environment variables can be used to override the default toolchain.
  CXX         C++ compiler [default=g++]
  AR          Archive maintenance utility [default=ar]
  AS          Assembler [default=as]
  RANLIB      Archive indexing utility [default=ranlib]

If a host triple is provided, it is prepended to CXX, AR, AS and RANLIB.

Following environment variables can be used to provide additional flags to the
compiler/linker.
  CXXFLAGS    Additional C++ compiler flags, e.g. -I<include-dir>
  LDFLAGS     Additional linker flags, e.g. -L<lib-dir>
  LDLIBS      Additional libraries to pass to the linker, e.g. -l<lib>

EOF
}

function rel2abs {
  if [ ! -z "$1" ]; then
    local retval=`cd $1 2>/dev/null && pwd || exit 1`
    echo $retval
  fi
}

function read_dirname {
  local dir_name=`expr "X$1" : '[^=]*=\(.*\)'`;
  local retval=`rel2abs $dir_name`
  [ -z $retval ] && echo "Bad option '$1': no such directory" && exit 1;
  echo $retval
}

function is_set {
  local myvar=${1:-notset}
  if [ "$myvar" == "notset" ]; then
    return 1
  else
    return 0
  fi
}

function failure {
  echo "***configure failed: $* ***" >&2
  if [ -f pitch.mk ]; then rm pitch.mk; fi
  exit 1;
}

function check_exists {
  if [ ! -f $1 ]; then failure "$1 not found."; fi
}

function check_compiler {
  COMPILER=$1
  if ! which $COMPILER >&/dev/null; then
    failure "$COMPILER is not installed.
             You need g++ >= 4.7, Apple clang >= 5.0 or LLVM clang >= 3.3."
  else
    COMPILER_VER_INFO=$($COMPILER --version 2>/dev/null)
    if [[ $COMPILER_VER_INFO == *"g++"* ]]; then
      GCC_VER=$($COMPILER -dumpversion)
      GCC_VER_NUM=$(echo $GCC_VER | sed 's/\./ /g' | xargs printf "%d%02d%02d")
      if [ $GCC_VER_NUM -lt 40700 ]; then
        failure "$COMPILER (g++-$GCC_VER) is not supported.
                 You need g++ >= 4.7, Apple clang >= 5.0 or LLVM clang >= 3.3."
      elif [ $GCC_VER_NUM  == 40801 ] || [ $GCC_VER_NUM == 40802 ]; then
        failure "$COMPILER (g++-$GCC_VER) is not supported.
                 GCC 4.8.1 and 4.8.2 have a bug in the implementation of
                 the nth_element algorithm provided by the standard library.
                 This will cause Kaldi to crash (make test would fail).
                 Please use another C++ compiler with C++11 support.
                 You need g++ >= 4.7, Apple clang >= 5.0 or LLVM clang >= 3.3."
      fi
    elif [[ $COMPILER_VER_INFO == *"Apple"* ]]; then
      CLANG_VER=$(echo $COMPILER_VER_INFO | grep version | sed "s/.*version \([0-9\.]*\).*/\1/")
      CLANG_VER_NUM=$(echo $COMPILER_VER_INFO | grep version | sed "s/.*clang-\([0-9]*\).*/\1/")
      if [ $CLANG_VER_NUM -lt 500 ]; then
        failure "$COMPILER (Apple clang-$CLANG_VER) is not supported.
                 You need g++ >= 4.7, Apple clang >= 5.0 or LLVM clang >= 3.3."
      fi
    elif [[ $COMPILER_VER_INFO == *"LLVM"* ]]; then
      CLANG_VER=$(echo $COMPILER_VER_INFO | grep version | sed "s/.*version \([0-9\.]*\).*/\1/")
      CLANG_VER_NUM=$(echo $CLANG_VER | sed 's/\./ /g' | xargs printf "%d%02d")
      if [ $CLANG_VER_NUM -lt 303 ]; then
        failure "$COMPILER (LLVM clang-$CLANG_VER) is not supported.
                You need g++ >= 4.7, Apple clang >= 5.0 or LLVM clang >= 3.3."
      fi
    fi
  fi
}

function check_for_slow_expf {
  # We cannot run this test if we are cross compiling.
  if [[ "$TARGET_ARCH" == "`uname -m`" ]] ; then
    cd probe
    rm -f exp-test
    make -f Makefile.slow_expf 1>/dev/null
    ./exp-test
    if [ $? -eq 1 ]; then
        echo "*** WARNING: expf() seems to be slower than exp() on your machine. This is a known bug in old versions of glibc. Please consider updating glibc. ***"
        echo "*** Kaldi will be configured to use exp() instead of expf() in base/kaldi-math.h Exp() routine for single-precision floats. ***"
        echo "CXXFLAGS += -DKALDI_NO_EXPF" >> ../pitch.mk
    fi
    cd ..
  fi
}

#############################    CONFIGURATION    #############################

# This variable identifies the type of system where built programs and
# libraries will run. It is set by the configure script when cross compiling.
unset HOST

# These environment variables can be used to override the default toolchain.
CXX=${CXX:-g++}
AR=${AR:-ar}
AS=${AS:-as}
RANLIB=${RANLIB:-ranlib}

# These environment variables can be used to provide additional flags to the
# compiler/linker. We want these flags to override the flags determined by the
# configure script, so we append them to the appropriate variables (CXXFLAGS,
# LDFLAGS and LDLIBS) after those variables are set by the configure script.
ENV_CXXFLAGS=$CXXFLAGS
ENV_LDFLAGS=$LDFLAGS
ENV_LDLIBS=$LDLIBS

# Default configuration
double_precision=false
dynamic_pitch=false
android=false

# Save the command line to include in kaldi.mk
cmd_line="$0 $@"

while [ $# -gt 0 ];
do
  case "$1" in
  --help)
    usage; exit 0 ;;
  --version)
    echo $CONFIGURE_VERSION; exit 0 ;;
  --static)
    dynamic_pitch=false;
    shift ;;
  --shared)
    dynamic_pitch=true;
    shift ;;
  --double-precision)
    double_precision=true;
    shift ;;
  --double-precision=yes)
    double_precision=true;
    shift ;;
  --double-precision=no)
    double_precision=false;
    shift ;;
  --host=*)
    # The type of system where built programs and libraries will run.
    # It should be in the format cpu-vendor-os. If specified, this script
    # will infer the target architecture from the specified host triple.
    HOST=`expr "X$1" : '[^=]*=\(.*\)'`;
    shift ;;
  --android-incdir=*)
    android=true;
    dynamic_pitch=false;
    ANDROIDINC=`read_dirname $1`;
    shift;;
  *)  echo "Unknown argument: $1, exiting"; usage; exit 1 ;;
  esac
done

if $android && [[ "$CXX" != *clang++*  ]] ; then
  failure "Android build requires clang++. Make sure you have clang++ installed
  on your system and then override the default compiler by setting CXX, e.g.
  CXX=clang++ ./configure"
fi

# If HOST is set
# 1. We prepend it to CXX, AR, AS and RANLIB.
# 2. We parse the target architecture from the HOST triple.
# Otherwise we set the target architecture to the output of `uname -m`.
if is_set $HOST; then
  CXX="$HOST-$CXX"
  AR="$HOST-$AR"
  AS="$HOST-$AS"
  RANLIB="$HOST-$RANLIB"

  # The host triple will be something like "armv8-rpi3-linux-gnueabihf". We
  # need the first field which is the target architecture for this build. The
  # following command will take the host triple "armv8-rpi3-linux-gnueabihf"
  # and return ["armv8", "rpi3", "linux", "gnueabihf"] in PARTS.
  IFS='-' read -ra PARTS <<< "$HOST"
  # The first field in the PARTS list is the target architecture.
  TARGET_ARCH="$PARTS"
  if [[ "$TARGET_ARCH" != arm* && "$TARGET_ARCH" != ppc64le && "$TARGET_ARCH" != x86* ]] ; then
    # We currently only support building for x86[_64], arm*, and ppc64le.
    # If TARGET_ARCH was read from the HOST variable, it must be one of these.
    failure "$TARGET_ARCH is not a supported architecture.
             Supported architectures: x86[_64], arm*, ppc64le."
  fi
else
  TARGET_ARCH="`uname -m`"
fi

echo "Configuring ..."

# Back up the old pitch.mk in case we modified it
if [ -f pitch.mk ]; then
  echo "Backing up pitch.mk to pitch.mk.bak ..."
  cp pitch.mk pitch.mk.bak
fi

# Generate the new pitch.mk file
echo "# This file was generated using the following command:" > pitch.mk
echo "# $cmd_line" >> pitch.mk
echo >> pitch.mk
echo "CONFIGURE_VERSION := $CONFIGURE_VERSION" >> pitch.mk
echo >> pitch.mk

echo "# Toolchain configuration" >> pitch.mk
echo >> pitch.mk
echo "CXX = $CXX" >> pitch.mk
echo "AR = $AR" >> pitch.mk
echo "AS = $AS" >> pitch.mk
echo "RANLIB = $RANLIB" >> pitch.mk
echo >> pitch.mk

echo "Checking compiler $CXX ..."
check_compiler $CXX

echo "# Base configuration" >> pitch.mk
echo >> pitch.mk
if $dynamic_pitch ; then
  PITCHLIBDIR=`pwd`/lib
  echo "PITCH_FLAVOR := dynamic" >> pitch.mk
  echo "PITCHLIBDIR := $PITCHLIBDIR" >> pitch.mk
fi
if $double_precision; then
  echo "DOUBLE_PRECISION = 1" >> pitch.mk
else
  echo "DOUBLE_PRECISION = 0" >> pitch.mk
fi

# OS-specific steps given below append to pitch.mk
echo "Doing OS specific configurations ..."

if $android ; then
  if [ -z $ANDROIDINC ] ;  then
    failure "--android-incdir must be specified for android builds."
  fi

  if ! is_set $HOST; then
    failure "HOST must be specified for android builds."
  fi

  echo "ANDROIDINC = $ANDROIDINC" >> pitch.mk

  cat makefiles/android.mk >> pitch.mk

  echo "Successfully configured for Android."

elif [ "`uname`" == "Darwin" ]; then
  # Check for Darwin first, because we later call uname -o (for Cygwin)
  # which crashes on Darwin.

  echo "On Darwin: Checking for Accelerate framework ..."
  if [ ! -e /System/Library/Frameworks/Accelerate.framework ]; then
    failure "Need the Accelerate framework to compile on Darwin."
  fi
  OSX_VER=$(sw_vers | grep ProductVersion | awk '{print $2}' | awk '{split($0,a,"."); print a[1] "." a[2]; }')
  OSX_VER_NUM=$(echo $OSX_VER | sed 's/\./ /g' | xargs printf "%d%02d")
  echo "Configuring for OS X version $OSX_VER ..."
  if [ $OSX_VER_NUM -ge 1005 ]; then
    cat makefiles/darwin.mk >> pitch.mk
  else
    failure "Mac OS X version '$OSX_VER' is not supported."
  fi

  if [ $OSX_VER_NUM == 1011 ]; then
    echo "**BAD WARNING**: You are using OS X El Capitan.  Some versions of this OS"
    echo "**BAD WARNING**: have a bug in the BLAS implementation that affects the tool."
    echo "**BAD WARNING**: After compiling, cd to matrix/ and type 'make test'.  The"
    echo "**BAD WARNING**: test will fail if the problem exists in your version. "
    echo "**BAD WARNING**: Eventually this issue will be fixed by system updates from"
    echo "**BAD WARNING**: Apple.  Unexplained crashes with reports of NaNs will"
    echo "**BAD WARNING**: be caused by this bug, but some recipes will (sometimes) work."
    sleep 1; echo -n .; sleep 1; echo -n .; sleep 1; echo .
  fi
  echo "Successfully configured for Darwin with Accelerate framework."

elif [ "`uname -o`" == "Cygwin"  ]; then
  echo "On Cygwin..."
  
  cat makefiles/cygwin.mk >> pitch.mk
  echo "Successfully configured for Cygwin."

elif [ "`uname`" == "Linux" ]; then
  echo "On Linux..."
  # Choose different files depend on different POSIXs.
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_arm.mk >> pitch.mk
  elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_ppc64le.mk >> pitch.mk
  elif [[ "$TARGET_ARCH" == "x86_64" ]]; then
    cat makefiles/linux_x86_64.mk >> pitch.mk
  elif [[ "$TARGET_ARCH" == i386* ]]; then
    cat makefiles/linux.mk >> pitch.mk
  else
    failure "Unsupported arch $TARGET_ARCH"
  fi
  echo "Successfully configured for Linux" 
fi

# Append the flags set by environment variables last so they can be used
# to override the automatically generated configuration.
echo >> pitch.mk
echo "# Environment configuration" >> pitch.mk
echo >> pitch.mk
if [ -n "$ENV_CXXFLAGS" ]; then echo "CXXFLAGS += $ENV_CXXFLAGS" >> pitch.mk; fi
if [ -n "$ENV_LDFLAGS" ]; then echo "LDFLAGS += $ENV_LDFLAGS" >> pitch.mk; fi
if [ -n "$ENV_LDLIBS" ]; then echo "LDLIBS += $ENV_LDLIBS" >> pitch.mk; fi

# We check for slow exp implementation just before we exit. This check uses
# and possibly modifies the pitch.mk file that we just generated.
check_for_slow_expf;

echo "SUCCESS"
echo "To compile: make clean -j; make depend -j; make -j"
echo " ... or e.g. -j 10, instead of -j, to use a specified number of CPUs"
exit 0;
